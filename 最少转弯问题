#include <iostream>
#include <queue>
#include <vector>
using namespace std;
struct node {
    int x, y;
    int d;
};
int n, m;
int start_x, start_y, end_x, end_y;
int a[110][110];
int dist[110][110][4];
int dx[4] = { -1, 1, 0, 0 };
int dy[4] = { 0, 0, -1, 1 };
void clean() {
    for (int i = 0; i < 110; i++) {
        for (int j = 0; j < 110; j++) {
            for (int k = 0; k < 4; k++) {
                dist[i][j][k] = 2100000000;
            }
        }
    }
    for (int i = 0; i < 4; i++) {
        dist[start_x][start_y][i] = 0;
    }
}
int bfs() {
    queue<node> q;
    for (int d = 0; d < 4; d++) {
        q.push({ start_x, start_y, d });
    }
    for(;;) {
        if (q.empty()) {
            break;
        }
        node cur = q.front();
        q.pop();
        for (int d = 0; d < 4; d++) {
            int nx = cur.x + dx[d];
            int ny = cur.y + dy[d];
            int new_t = dist[cur.x][cur.y][cur.d];
            if (cur.d != d) {
                new_t++;
            }
            if (nx >= 0 && nx < n && ny >= 0 && ny < m && a[nx][ny] == 0) { //原来为nx >= 1 && nx < n && ny >= 1 && ny < m && a[nx][ny] == 0
                if (new_t < dist[nx][ny][d]) {
                    dist[nx][ny][d] = new_t;
                    q.push({ nx, ny, d }); //漏了d
                }
            }
        }
    }
    return 0;
}
int main() {
    cin >> n >> m;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> a[i][j];
        }
    }
    cin >> start_x >> start_y >> end_x >> end_y;
    start_x--; start_y--;
    end_x--; end_y--;
    clean();
    bfs();
    int ans = 2100000000;
    for (int i = 0;i < 4;i++) {
        ans = min(ans,dist[end_x][end_y][i]);   
    }
    if (ans == 2100000000) {
        cout << -1 << endl;
    }
    else {
        cout << ans << endl;
    }
    return 0;
}
